plugins {
}

version '1.0.0-SNAPSHOT'

/**
 * 依赖方式:
 *  本地依赖:
 *      implementation file('当前目录/xx.jar', ...)
 *      or
 *      implementation fileTree('dir':'目录', includes: ['*.jar'], excludes: [''])
 *  项目依赖(必须在 settings.gradle 中 include 的项目):
 *      implementation project(':projectName')
 *  直接依赖:
 *  依赖类型 依赖组名:依赖名称:依赖版本号
 *      implementation group:'org.springframework.boot',name:'spring-boot-starter-web' version:'3.0.0'
 *      or
 *      implementation org.springframework.boot:spring-boot-starter-web:3.0.0
 *
 * 依赖类型:
 *  compileOnly: 由java插件提供, 适用于编译期需要而不需要打包的情况
 *  runtimeOnly: 由 java 插件提供, 只在运行期有效,编译时不需要
 *  implementation: 由 java 插件提供, 在编译、运行时都有效
 *  api: java-library 插件提供支持,这些依赖项可以传递性地导出给使用者，用于编译时和运行时
 *  testCompileOnly: 由 java 插件提供,用于编译测试的依赖项，运行时不需要
 *  testRuntimeOnly: 由 java 插件提供,只在测试运行时需要，而不是在测试编译时需要
 *
 */
dependencies {

    // import BOM
//    implementation platform('io.projectreactor:reactor-bom:2022.0.0-M2')
    // add dependencies without a version number
//    implementation 'io.projectreactor:reactor-core'



    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // SpringCloud
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Alibaba
//    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
    implementation 'com.alibaba:druid-spring-boot-starter'

    // postgresql
    implementation 'org.postgresql:postgresql'
    implementation 'org.hibernate:hibernate-spatial:6.3.0.CR1'

    // 传递依赖: 引用模块
    api project(':sweet-schema')

}

// 编译 properties
task replaceYamlVariables {
    group "zeinex"

    println "编译 === ${project.rootDir}"

    doLast {
        def properties = new Properties()
        def propertiesFile = file("$project.rootDir/env-profile/local.properties") // 替换为实际的properties文件路径

        // 加载properties文件
        properties.load(propertiesFile.newDataInputStream())

        def yamlFile = file("$project.projectDir/src/main/resources/application.yaml") // 替换为实际的application.yaml文件路径
        def yamlContent = yamlFile.text

        // 使用Groovy脚本替换yaml文件中的变量
        properties.each { key, value ->
            yamlContent = yamlContent.replaceAll("@${key}@", value)
        }

        // 写入替换后的内容到yaml文件
        def compileYamlFile = file("$project.projectDir/build/resources/main/application.yaml")
        // 替换为实际的application.yaml文件路径
        compileYamlFile.write(yamlContent)
    }
}

classes.dependsOn replaceYamlVariables

// 启动类
task runWithJavaExec(type: JavaExec) {
    group "zeinex"
    description = "Run the main class with JavaExecTask"
    classpath sourceSets.main.runtimeClasspath
    main 'com.zeinex.sweet.BootstrapServerApplication'
}